---- Diapo 1

- quién soy
- de qué trata la presentación
- es dagger viable para crear pipelines de ci/cd?
- ventajas y desventajas de dagger frente a métodos convencionales

---- Diapo 2 Tabla de contenidos

- objetivos, problema y solución
- organización, repositorios y relación entre ellos
- CI, app e implementación con dagger
- CD, estructura de despliegue implementación con dagger
- conclusiones

---- Diapo 3 ¿Cuál es el problema?

- aplicaciones con cada vez más tecnologías
- representación reducida de la arquitectura de GitLab
- muchos servicios diferentes comunicados entre sí

- necesario un flujo de trabajo de integración y despliegue
    - cosas que hacer en el flujo
    - flujo automatizado

- cómo se realiza hoy en día este flujo automatizado
    - scripts específicos + scripts de unión
    - YAML: popular pero volátil
- caos funcional
- tiempo de ejecución muy elevado si no se configura correctamente la caché

- difícil de mantener
- conte de tiempo y dinero

---- Diapo 4 ¿Qué se propone?

- Dagger
    - revolución para la creación de pipelines CI/CD
    - tan importante como la aparición de Docker para el despliegue de aplicaciones.

---- Diapo 5 CI/CD

- qué es CI y CD
    - pasos de cada uno y qué se hace

---- Diapo 6 Dagger

- qué es Dagger
    - SDK de creación de pipelines de CI y CD
    - programático
    - múltiples lenguajes, conocidos por la mayoría de programadores
    - ciclos de CI/CD como aplicaciones estructuradas
    - aplicaciones -> módulos -> Daggerverse
    - módulos con funcionalidades específicas
    - funciones corren sobre runtime de OCI: Docker
    - ejecución en cualquier entorno de desarrollo con una herramienta como Docker
    - ejecución de manera local
    - uso extensivo y automatizado de la caché

---- Diapo 7 Organización de GitHub

- qué se hace en cada repositorio
- zoo
    - monorepo
        - los paquetes de la aplicación en un mismo lugar
        - más fácil de gestionar
        - Lerna
        - Dagger
- Kubernetes
    - archivos YAML para definir la estructura
- Helm
    - plantillas para creación dinámica de los archivos: Charts
    - se le pasan diferentes valores
    - definición de entornos
- helm-repository
    - Charts de Helm
- state
    - valores para cada entorno que se pasan a las Charts
    - rama deploy para recursos finales por entorno

---- Diapo 8 App zoo

- hablar de la imagen
- primeros pasos ciclo de CI
    - todo local
    - Dockerfiles
    - scripts
    - comandos
    - justfile
    - no comparable con una aplicación grande, pero se entiende la idea

---- Diapo 9 CI con Dagger

- funciones únicas
- traducción de Dockerfiles (API de Docker)
- estructuración
- concatenación de funciones

---- Diapo 10 helm-repository

- Chart umbrella
- subcharts
    - frontend
    - backend
    - mongo
- mongo de bitnami
- plantillas de recursos
    - cm: configuración de variables
    - svc: exponer pods mediante red
    - deploy: gestionar pods
    - ing: permitir acceso externo HTTP/HTTPS
    - secret: almacenar datos sensibles cifrados
- se necesita pasar valores a las plantillas

---- Diapo 11 state

- creación de diferentes entornos pasando diferentes valores
- rama main
    - archivos de valores
    - helmfile, para conectar con la Chart
- rama deploy
    - recursos finales por entorno
    - metodología GitOps para despliegue con ArgoCD

---- Diapo 12 GitOps & ArgoCD

Esto se realiza así porque se utiliza la herramienta ArgoCD, la cual funciona siguiendo esta metodología, en la cual se utilizan repositorios de Git para almacenar el estado que el equipo desea que tenga la aplicación. ArgoCD es una herramienta que permite desplegar aplicacines definidas mediante recursos de Kubernetes. Y tiene la capacidad de detectar cambios en el repositorio y rama que se le indique. Cuando detecta algún cambio, se actualiza, obteniene los cambios que se han realizado, y actualiza su estado para que concuerde con el estado que realmente se desea, que es el que está en el repositorio.
